name: Build Mesa on Ubuntu

on:
  workflow_dispatch:

jobs:
  build-mesa-ps4:
    name: Build Mesa and Components for PS4
    runs-on: ubuntu-latest

    steps:
    
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Cache APT packages
        uses: actions/cache@v4
        with:
          path: |
            /var/cache/apt/archives
            /var/lib/apt/lists
          key: apt-cache-v1

      - name: Enable source repositories
        run: |
          source /etc/os-release
          echo "deb-src http://azure.archive.ubuntu.com/ubuntu $VERSION_CODENAME main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list
          echo "deb-src http://azure.archive.ubuntu.com/ubuntu $VERSION_CODENAME-updates main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list
          echo "deb-src http://security.ubuntu.com/ubuntu $VERSION_CODENAME-security main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list
          sudo apt update

      - name: Install dependencies
        run: |
          sudo apt build-dep mesa -y
          sudo apt install -y \
            build-essential \
            glslang-tools \
            libelf-dev \
            liblua5.4-dev \
            libclang-17-dev \
            clang-tools-17 \
            libclc-17-dev \
            libclang-17-dev \
            libclang-cpp19 \
            libudev-dev \
            libvdpau1 \
            llvm-17-dev \
            llvm-spirv-17 \
            spirv-tools \
            libllvmspirvlib-17-dev \
            bindgen \
            meson-1.5 \
            ninja-build \
            python3-pip \
            python3-setuptools \
            python3-mako \
            libdrm-dev \
            libgbm-dev \
            libegl-dev \
            libgles2-mesa-dev \
            libwayland-dev \
            libwayland-egl-backend-dev \
            wayland-protocols \
            libxcb-randr0-dev \
            xorg-dev \
            xserver-xorg-dev \
            libpciaccess-dev \
            autoconf \
            automake \
            libtool

      - name: Cache SPIRV-Tools build
        id: cache-spirv
        uses: actions/cache@v4
        with:
          path: ~/spirv-tools-install
          key: spirv-tools-v1

      - name: Build spirv-tools (if not cached)
        if: steps.cache-spirv.outputs.cache-hit != 'true'
        run: |
          git clone https://github.com/KhronosGroup/SPIRV-Tools.git --recursive
          cd SPIRV-Tools
          python3 utils/git-sync-deps
          mkdir build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$HOME/spirv-tools-install
          make -j$(nproc)
          make install

      - name: Add SPIRV-Tools to PATH
        run: echo "$HOME/spirv-tools-install/bin" >> $GITHUB_PATH

      - name: Clone Mesa
        run: |
          git clone --recursive https://gitlab.freedesktop.org/mesa/mesa.git
          cd mesa
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)
          git checkout $latest_tag

      - name: Copy patch
        working-directory: ./patches
        run: |
          cp mesa.patch ../mesa
          cp libdrm.patch ../mesa/libdrm
          cp xf86-video-amdgpu.patch ../mesa
# Removed patch  -Np1 < mesa.patch for now
      - name: Build Mesa
        working-directory: ./mesa
        run: |
          mkdir build64
          meson setup build64 -Dtests=false --buildtype=plain -Db_ndebug=true -Dc_args=-pipe -march=native -O2 -mfpmath=sse -Dcpp_args=-std=c++17 -pipe -march=native -O2 -mfpmath=sse -Dvalgrind=enabled
          ninja -C build64

      - name: Compress build64 directory
        working-directory: ./mesa
        run: |
          tar -I 'zstd -19 -T0' -cf ../mesa-build64.tar.zst build64

      - name: Upload mesa-build64.tar.zst as artifact
        uses: actions/upload-artifact@v4
        with:
          name: mesa-build64
          path: mesa-build64.tar.zst
          
      # Step 7: Build xf86-video-amdgpu for PS4
      #- name: Build xf86-video-amdgpu
       # run: |
        #  patch  -Np1 < ../patches/xf86-video-amdgpu.patch
         # cd xf86-video-amdgpu
          #./autogen.sh --prefix=/usr
          #make
          #sudo make install
          #cd ../..
